import { useEffect, useState } from "react";
import { userService } from "../../services/userService";  // Import API userService
import '@fortawesome/fontawesome-free/css/all.min.css';
import Modal from "react-modal";




Modal.setAppElement("#root");

const Dashboard = () => {
  const [users, setUsers] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editUser, setEditUser] = useState(null); // L∆∞u user c·∫ßn s·ª≠a
  const [newUser, setNewUser] = useState({
    email: "",
    firstName: "",
    lastName: "",
    address: "",
    phoneNumber: "",
    gender: "Male",
  })

    // üîÑ Load danh s√°ch ng∆∞·ªùi d√πng
    const fetchUsers = async () => {
      try {
        const response = await userService.getAllUsers("all");
        if (response.errCode === 0 && response.users) {
          setUsers(response.users);
        }
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch user:", error);
      }
    };
  
    useEffect(() => {
      fetchUsers();
    }, []);
  
    // üéØ X·ª≠ l√Ω thay ƒë·ªïi input
    const handleInputChange = (e) => {
      setNewUser({ 
        ...newUser, 
        [e.target.name]: e.target.value 
      });
    };
  
    // ‚úÖ Th√™m ng∆∞·ªùi d√πng
    const handleSaveUser = async () => {
      console.log("User m·ªõi:", newUser);
  
      if (!newUser.email || !newUser.firstName || !newUser.lastName) {
        alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
        return;
      }
  
      try {
          console.log("D·ªØ li·ªáu g·ª≠i API:", newUser); 
          const response = await userService.createUser(newUser);
          console.log("API response:", response); 
  
          if (response.errCode === 0) {
              alert("Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng!");
              setIsModalOpen(false);
  
              // C·∫≠p nh·∫≠t danh s√°ch ngay l·∫≠p t·ª©c b·∫±ng c√°ch th√™m user m·ªõi v√†o ƒë·∫ßu m·∫£ng
              setUsers(prevUsers => [newUser, ...prevUsers]);
  
          } else {
              alert("L·ªói t·ª´ server: " + response.message);
          }
      } catch (error) {
          console.error("L·ªói khi th√™m user:", error);
          alert("Kh√¥ng th·ªÉ th√™m ng∆∞·ªùi d√πng! Ki·ªÉm tra console.");
      }
  
      setNewUser({ email: "", firstName: "", lastName: "", address: "", phoneNumber: "", gender: "Male" });
  };
  
    // ‚ùå X√≥a ng∆∞·ªùi d√πng
    const handleDeleteUser = async (userId) => {
      if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?")) {
        return;
      }
  
      try {
        const response = await userService.deleteUser(userId);
        if (response.errCode === 0) {
          alert("X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!");
          fetchUsers(); // L·∫•y danh s√°ch m·ªõi
        } else {
          alert("L·ªói t·ª´ server: " + response.message);
        }
      } catch (error) {
        console.error("L·ªói khi x√≥a user:", error);
        alert("Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng!");
      }
    };
  
    // ‚úèÔ∏è Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng
    const handleEditClick = (user) => {
      setEditUser(user);
      setIsModalOpen(true);
    };
  
    const handleEditInputChange = (e) => {
      setEditUser({
        ...editUser,
        [e.target.name]: e.target.value
      });
    };
  
    const handleUpdateUser = async () => {
      if (!editUser.firstName || !editUser.lastName) {
        alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
        return;
      }
  
      try {
        const response = await userService.updateUser(editUser);
        if (response.errCode === 0) {
          alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
          setIsModalOpen(false);
          fetchUsers(); // C·∫≠p nh·∫≠t danh s√°ch t·ª´ API
        } else {
          alert("L·ªói t·ª´ server: " + response.message);
        }
      } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t user:", error);
        alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng!");
      }
    };


  return (
    <div className="users-container">
      <h1 className="title text-center">Manage users with Huong</h1>
      <div className="mx-1">
        <button className="add-user-btn" onClick={() => setIsModalOpen(true)} ><i className="fa-solid fa-plus"></i> Add new users</button>
      </div>
      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)} className="modal-content" overlayClassName="modal-overlay">
        <h2 className="text-xl font-bold mb-4">Add New User</h2>

        <input type="text" name="email" placeholder="Email" value={newUser.email} onChange={handleInputChange} className="input-field" />
      

        <input type="text" name="firstName" placeholder="First Name" value={newUser.firstName} onChange={handleInputChange} className="input-field" />

        <input type="text" name="lastName" placeholder="Last Name" value={newUser.lastName} onChange={handleInputChange} className="input-field" />

        <input type="text" name="address" placeholder="Address" value={newUser.address} onChange={handleInputChange} className="input-field" />

        <input type="text" name="phoneNumber" placeholder="Phone Number" value={newUser.phoneNumber} onChange={handleInputChange} className="input-field" />

        <select name="gender" value={newUser.gender} onChange={handleInputChange} className="input-field">
          <option value="Male">Male</option>
          <option value="Female">Female</option>
        </select>

        <div className="modal-buttons">
          <button className="save-btn" onClick={handleSaveUser}>Save</button>
          <button className="close-btn" onClick={() => setIsModalOpen(false)}>Cancel</button>
        </div>
      </Modal>


      <div className="users-table">
        <table id="customers">
          <thead>
            <tr>
              <th>Email</th>
              <th>Firstname</th>
              <th>Lastname</th>
              <th>Address</th>
              <th>PhoneNumber</th>
              <th>Gender</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {users?.length > 0 ? (
              users?.map((user, index) => (
                <tr key={user?.id || index}>
                  <td>{user?.email}</td>
                  <td>{user?.firstName}</td>
                  <td>{user?.lastName}</td>
                  <td>{user?.address}</td>
                  <td>{user?.phoneNumber}</td>
                  <td>{user?.gender}</td>
                  <td>
                    <button className="btn-edit"><i className="fa-solid fa-pencil"></i></button>
                    <button  onClick={() => handleDeleteUser(user.id)} className="btn-delete"><i className="fa-solid fa-trash"></i></button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="7">Kh√¥ng c√≥ d·ªØ li·ªáu</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};


export default Dashboard;
